// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// npx prisma db push
generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum UserRole {
  customer
  admin
}

enum UserStatus {
  active
  blocked
  deleted
}

//User Account
model User {
  id                    String        @id @default(auto()) @map("_id") @db.ObjectId
  email                 String?       @unique
  
  role                  UserRole      @default(customer)
  name                  String?
  emailVerified         DateTime?
  //
  image                 String? 
  status                UserStatus    @default(active)

  //tables
  accounts              Account[]
  sessions              Session[]
  oneTime               OneTime[]
  subscription          Subscription?
  stripeCustomerId      String? 

  createdAt             DateTime      @default(now())
  updateAt              DateTime      @updatedAt

  //login tracker
  lastLoginAt           DateTime?
  loginCount            Int           @default(0)

  //custom
  isOnboardingComplete  Boolean       @default(false)
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  //providers
  provider           String
  providerAccountId  String?  
  //tokens
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  type               String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  //tables
  user               User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

//SUBSCRIPTIONS
model Subscription {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @unique @db.ObjectId
  stripeId           String?

  //Agnostic
  plan               String  @default("free")
  isRevoke           Boolean @default(false) //Revoke Access
  frequency          String?

  //current period
  currentPeriodStart Float?
  currentPeriodEnd   Float?

  //cancel
  cancelAtPeriodEnd  Boolean?

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  //tables
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

//ONE-TIME PAYMENTS
model OneTime {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String @db.ObjectId

  product            String
  isPaid             Boolean    @default(false) 

  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  //tables
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Feedback {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String @db.ObjectId
  feedback           String
  createdAt          DateTime @default(now())
}

model Lead {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  email         String @unique
  createdAt     DateTime @default(now())
}